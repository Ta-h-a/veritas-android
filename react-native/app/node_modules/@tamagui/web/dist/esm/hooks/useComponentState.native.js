import { isServer, isWeb } from "@tamagui/constants";
import { useCreateShallowSetState } from "@tamagui/is-equal-shallow";
import { useDidFinishSSR, useIsClientOnly } from "@tamagui/use-did-finish-ssr";
import { useRef, useState } from "react";
import { defaultComponentState, defaultComponentStateMounted, defaultComponentStateShouldEnter } from "../defaultComponentState.native.js";
import { isObj } from "../helpers/isObj.native.js";
import { log } from "../helpers/log.native.js";
var useComponentState = function (props, animationDriver, staticConfig, config) {
  var _animationDriver_usePresence,
    isHydrated = useDidFinishSSR(),
    needsHydration = !useIsClientOnly(),
    [startedUnhydrated] = useState(needsHydration && !isHydrated),
    useAnimations = animationDriver?.useAnimations,
    {
      isHOC
    } = staticConfig,
    stateRef = useRef({}),
    hasAnimationProp = !!(!isHOC && "animation" in props || props.style && hasAnimatedStyleValue(props.style)),
    supportsCSS = animationDriver?.supportsCSS,
    curStateRef = stateRef.current;
  !needsHydration && hasAnimationProp && (curStateRef.hasAnimated = !0);
  var willBeAnimatedClient = function () {
      var next = !!(hasAnimationProp && !isHOC && useAnimations);
      return !!(next || curStateRef.hasAnimated);
    }(),
    willBeAnimated = !isServer && willBeAnimatedClient;
  willBeAnimated && !curStateRef.hasAnimated && (curStateRef.hasAnimated = !0);
  var {
      disableClassName
    } = props,
    presence = !isHOC && willBeAnimated && props.animatePresence !== !1 && (animationDriver == null || (_animationDriver_usePresence = animationDriver.usePresence) === null || _animationDriver_usePresence === void 0 ? void 0 : _animationDriver_usePresence.call(animationDriver)) || null,
    presenceState = presence?.[2],
    isExiting = presenceState?.isPresent === !1,
    isEntering = presenceState?.isPresent === !0 && presenceState.initial !== !1,
    hasEnterStyle = !!props.enterStyle,
    hasAnimationThatNeedsHydrate = hasAnimationProp && !isHydrated && (animationDriver?.isReactNative || !supportsCSS),
    canImmediatelyEnter = hasEnterStyle || isEntering,
    shouldEnter = !isHOC && (hasEnterStyle || isEntering || hasAnimationThatNeedsHydrate ||
    // disableClassName doesnt work server side, only client, so needs hydrate
    // this is just for a better ux, supports css variables for light/dark, media queries, etc
    disableClassName),
    initialState = shouldEnter ?
    // on the very first render we switch all spring animation drivers to css rendering
    // this is because we need to use css variables, which they don't support to do proper SSR
    // without flickers of the wrong colors.
    // but once we do that initial hydration and we are in client side rendering mode,
    // we can avoid the extra re-render on mount
    canImmediatelyEnter ? defaultComponentStateShouldEnter : defaultComponentState : defaultComponentStateMounted,
    disabled = isDisabled(props);
  disabled != null && (initialState.disabled = disabled);
  var states = useState(initialState),
    state = props.forceStyle ? {
      ...states[0],
      [props.forceStyle]: !0
    } : states[0],
    setState = states[1],
    isAnimated = willBeAnimated;
  isWeb && hasAnimationThatNeedsHydrate && !staticConfig.isHOC && !isHydrated && (isAnimated = !1, curStateRef.willHydrate = !0), disabled !== state.disabled && (disabled && Object.assign(state, defaultComponentStateMounted), state.disabled = disabled, setState(function (_) {
    return {
      ...state
    };
  }));
  var groupName = props.group,
    setStateShallow = useCreateShallowSetState(setState, props.debug);
  if (presenceState && isAnimated && isHydrated && staticConfig.variants) {
    process.env.NODE_ENV === "development" && props.debug === "verbose" && console.warn(`has presenceState ${JSON.stringify(presenceState)}`);
    var {
      enterVariant,
      exitVariant,
      enterExitVariant,
      custom
    } = presenceState;
    isObj(custom) && Object.assign(props, custom);
    var exv = exitVariant ?? enterExitVariant,
      env = enterVariant ?? enterExitVariant;
    state.unmounted && env && staticConfig.variants[env] ? (process.env.NODE_ENV === "development" && props.debug === "verbose" && console.warn(`Animating presence ENTER "${env}"`), props[env] = !0) : isExiting && exv && (process.env.NODE_ENV === "development" && props.debug === "verbose" && console.warn(`Animating presence EXIT "${exv}"`), props[exv] = exitVariant !== enterExitVariant);
  }
  var noClass = !isWeb || !!props.forceStyle;
  if (!isHydrated) noClass = !1;else if (isWeb && isHydrated) {
    var isAnimatedAndHydrated = isAnimated && isHydrated,
      isClassNameDisabled = !staticConfig.acceptsClassName && (config.disableSSR || !state.unmounted),
      isDisabledManually = disableClassName && !state.unmounted;
    (isAnimatedAndHydrated || isDisabledManually || isClassNameDisabled) && (noClass = !0, process.env.NODE_ENV === "development" && props.debug && log("avoiding className", {
      isAnimatedAndHydrated,
      isDisabledManually,
      isClassNameDisabled
    }));
  }
  return {
    startedUnhydrated,
    curStateRef,
    disabled,
    groupName,
    hasAnimationProp,
    hasEnterStyle,
    isAnimated,
    isExiting,
    isHydrated,
    presence,
    presenceState,
    setState,
    setStateShallow,
    noClass,
    state,
    stateRef,
    supportsCSS,
    willBeAnimated,
    willBeAnimatedClient
  };
};
function hasAnimatedStyleValue(style) {
  return Object.keys(style).some(function (k) {
    var val = style[k];
    return val && typeof val == "object" && "_animation" in val;
  });
}
var isDisabled = function (props) {
  var _props_accessibilityState;
  return props.disabled || props.passThrough || ((_props_accessibilityState = props.accessibilityState) === null || _props_accessibilityState === void 0 ? void 0 : _props_accessibilityState.disabled) || props["aria-disabled"] || props.accessibilityDisabled || !1;
};
export { useComponentState };
//# sourceMappingURL=useComponentState.native.js.map
