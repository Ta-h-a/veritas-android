import { pseudoDescriptors } from "./pseudoDescriptors.native.js";
var mergeProps = function (defaultProps, props) {
    var out = {};
    for (var key in defaultProps) key in props || (out[key] = defaultProps[key]);
    for (var key1 in props) mergeProp(out, defaultProps, props, key1);
    return out;
  },
  mergeComponentProps = function (defaultProps, contextProps, props) {
    var overriddenContext = null;
    if (!defaultProps && !contextProps) return [props, overriddenContext];
    if (defaultProps && !contextProps) return [mergeProps(defaultProps, props), overriddenContext];
    var out = {};
    for (var key in defaultProps) key in props || (out[key] = defaultProps[key]);
    for (var key1 in contextProps) key1 in props || (out[key1] = contextProps[key1]);
    for (var key2 in props) mergeProp(out, defaultProps, props, key2), contextProps && key2 in contextProps && (overriddenContext || (overriddenContext = {}), overriddenContext[key2] = props[key2]);
    return [out, overriddenContext];
  };
function mergeProp(out, defaultProps, props, key) {
  var val = props[key];
  if (defaultProps && key in defaultProps && (key in pseudoDescriptors || key[0] === "$") && val && typeof val == "object") {
    var defaultVal = defaultProps[key];
    defaultVal && typeof defaultVal == "object" && (val = mergeProps(defaultVal, val));
  }
  out[key] = val;
}
export { mergeComponentProps, mergeProps };
//# sourceMappingURL=mergeProps.native.js.map
