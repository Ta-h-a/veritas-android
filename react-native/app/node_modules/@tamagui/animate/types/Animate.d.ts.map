{
  "mappings": "AAAA,cAAc,4BAA4B,2BAA2B;KAIhE,YAAY;CACf,UAAU,MAAM;CAChB;AACD;KAEI,gBAAgB,uBAAuB;CAC1C,MAAM;CACN;CACA;CACA;AACD;AAED,YAAY,eAAe,YAAY;;;;;;;;;;;;;;;;;;;AAqBvC,OAAO,iBAAS,QAAQ,EACtB,UACA,WACA,MACA,SACA,YACA,GAAG,OACU,EAAZ,eAAe,MAAM",
  "names": [],
  "sources": [
    "src/Animate.tsx"
  ],
  "sourcesContent": [
    "import type { AnimatePresenceProps } from '@tamagui/animate-presence'\nimport { AnimatePresence, PresenceChild } from '@tamagui/animate-presence'\nimport { startTransition, useEffect, useState } from 'react'\n\ntype BaseProps = {\n  children: React.ReactNode\n  passThrough?: boolean\n}\n\ntype PresenceProps = AnimatePresenceProps & {\n  type: 'presence'\n  present: boolean\n  keepChildrenMounted?: boolean\n  lazyMount?: boolean\n}\n\nexport type AnimateProps = BaseProps & PresenceProps\n\n/**\n * Because mounting and unmounting children can be expensive, this gives us the\n * option to avoid that.\n *\n * type: 'presence' will act just like AnimatePresence, except you use `present`\n * instead of conditional children.\n * Note that this does avoid reconciling the children even when present={false}\n * so no extra cost to perf over AnimatePresence.\n *\n * type: 'presence' with keepChildrenMounted true *always* render the children so you pay\n * the cost up-front to mount them, but then you avoid the mount cost at the start\n * of the animation.\n *\n * There's no \"right way\" it just depends on the use case, this component just makes\n * it easier to choose the strategy yourself.\n *\n *\n */\n\nexport function Animate({\n  children,\n  lazyMount,\n  type,\n  present,\n  passThrough,\n  ...props\n}: AnimateProps): React.ReactNode {\n  const [lazyMounted, setLazyMounted] = useState(lazyMount ? false : present)\n\n  useEffect(() => {\n    if (passThrough) return\n    if (!lazyMount) return\n    if (!present) return\n    startTransition(() => {\n      setLazyMounted(present)\n    })\n  }, [lazyMount, present])\n\n  // always immediately unmount\n  const mounted = !present ? false : lazyMount ? lazyMounted : present\n\n  if (type === 'presence') {\n    if (props.keepChildrenMounted) {\n      return (\n        <PresenceChild\n          isPresent\n          {...(!passThrough && {\n            initial: props.initial ? undefined : false,\n            onExitComplete: props.onExitComplete,\n            enterVariant: props.enterVariant,\n            exitVariant: props.exitVariant,\n            enterExitVariant: props.enterExitVariant,\n            // BUGFIX: this causes continous re-renders if keepChildrenMounted is true, see HeaderMenu\n            // but since we always re-render this component on open changes this should be fine to leave off?\n            presenceAffectsLayout: false,\n            isPresent: present,\n            custom: props.custom,\n          })}\n        >\n          {children as any}\n        </PresenceChild>\n      )\n    }\n\n    return (\n      <AnimatePresence passThrough={passThrough} {...props}>\n        {mounted || passThrough ? children : null}\n      </AnimatePresence>\n    )\n  }\n\n  return <>{children}</>\n}\n"
  ],
  "version": 3
}